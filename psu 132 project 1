
# Program Name: Jukebox.py
#
# Author(s): Jason Feng, Yuxin Liu, William Sun
#
# Date: 06/03/2025
#
# Description:
# This program allows users to create a music playlist by selecting songs from a database.
# The playlist is saved to a CSV file, and the songs are played automatically using their links.
#




import csv
import webbrowser
import time
import os


# Stack class for implementing a stack data structure
class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[-1]

    def isEmpty(self):
        return not bool(self.items)

    def size(self):
        return len(self.items)


# Queue class for implementing a queue data structure
class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        self.items.insert(0, item)

    def dequeue(self):
        if not self.isEmpty():
            return self.items.pop()
        return None

    def isEmpty(self):
        return not bool(self.items)

    def size(self):
        return len(self.items)


# Load artist database from CSV file
artists = []
f = 'ArtistDB.csv'
fieldnames = ['name', 'artist', 'length', 'link']

# Create CSV file if it does not exist
if not os.path.exists(f):
    with open(f, 'w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()

# Read the artist database from CSV file
if os.path.exists(f):
    with open(f, 'r', newline='', encoding='utf-8-sig') as file:
        reader = csv.DictReader(file)
        artists = [{k.strip(): v.strip() for k, v in row.items() if k.strip() in fieldnames} for row in reader]


# Function to display a menu and allow users to select a song by number
def present_menu(artists):
    while True:
        print("\nChoose a song by number:")
        for i, artist in enumerate(artists, 1):
            print(f"{i}. {artist['name']} by {artist['artist']}")

        selection = input("Enter the number of your selection (or 0 to play the song): ").strip()
        if selection.isdigit():
            selection = int(selection)
            if selection == 0:
                return "Quit"
            elif 1 <= selection <= len(artists):
                return artists[selection - 1]
        print("Invalid selection. Please enter a number from the list.")


# Function to create a playlist based on user selection
def playlists():
    playlist = []
    while len(playlist) < 3:
        selected_song = present_menu(artists)
        if selected_song == "Quit":
            break
        if selected_song:
            playlist.append({k: v for k, v in selected_song.items() if k in fieldnames})
        else:
            print("No song selected.")
            return False
    return playlist


# Function to save the playlist to a CSV file
def save_playlist_to_csv(playlist):
    if playlist:
        with open('PlayList.csv', 'w', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(playlist)
        print("Playlist saved to PlayList.csv")
    else:
        print("No playlist to save.")


def convert_to_seconds(t_str):
    # Convert time in MM:SS to total seconds.
    t_parts = t_str.split(":")  # Split by ":"

    # If video length is in MM:SS
    if len(t_parts) == 2:
        minutes = int(t_parts[0])  # First part is minutes
        seconds = int(t_parts[1])  # Second part is seconds
        total_s = (minutes * 60) + seconds  # Convert to total seconds
    
        return total_s

    # If video length is in H:MM:SS
    elif len(t_parts) == 3:
        hours = int(t_parts[0])  # First part is hours
        minutes = int(t_parts[1])  # Second part is minutes
        seconds = int(t_parts[2])  # Third part is seconds
        total_s =  (hours * 3600) + (minutes * 60) + seconds  # Convert to total seconds

    # If the format is incorrect, return 0
    else:
        return 0
    return total_s


# Main function to create and save a playlist
def main():
    final_playlist = playlists()
    if final_playlist:
        save_playlist_to_csv(final_playlist)


if __name__ == "__main__":
    main()

# Initialize the queue for playing videos
q = Queue()
while True:
    # Creates a playlist CSV if file not found
    if not os.path.exists('PlayList.csv'):
        print("Waiting for playlist...")
        time.sleep(15)
        continue
    # Reads the CSV file
    with open('PlayList.csv', 'r', encoding='utf-8-sig') as file:
        reader = csv.DictReader(file)
        videos = [{k.strip(): v.strip() for k, v in row.items() if k.strip() in fieldnames} for row in reader]

    for video in videos:
        if video and 'link' in video:
            q.enqueue(video)

    print(f"Total videos in queue: {q.size()}") # display total song in queue

    # Checks if queue is not empty
    while not q.isEmpty():
        current_v = q.dequeue()
        if not current_v:
            continue
        v_link = current_v['link']
        v_name = current_v['name']
        v_length_str = current_v.get('length', "0")
        v_length = convert_to_seconds(v_length_str)

        print(f'{v_name} is now playing.')
        webbrowser.open(v_link)
        # if a song is selected into queue, it will play song duration before the next song.
        if v_length > 0:
            print(f'Waiting for {v_length} seconds...')
            time.sleep(v_length)
        else:
            print("No song length found. Waiting 5 minutes (default).") # displays if no song is selected
            time.sleep(300)

        print("Moving to the next video...\n")

    if os.path.exists('PlayList.csv'):
        print("Playlist finished.")
        os.remove('PlayList.csv')
    print("Checking for new songs every 15 seconds...")
    time.sleep(15)
