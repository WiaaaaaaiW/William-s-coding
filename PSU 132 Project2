# Name: Yuxin Liu, William Sun, Jason Feng
# Assignment: Project 2: Simulated Election
# Date: 04/03/2025
#
# Team Members Role:
# Yuxin Liu: 
# -> Task on handling the extra credit tasks involving the usage of matplotlib for plotting
# -> Handles any error and fixes any code as well as adding any additional codes.
#
# William Sun:
# -> Given task 7, 8, and 9 that handles the summary votes, print header of summary table, and generatesvoting summary
#
# Jason Feng:
# -> Given task 1 , 2, 3, 4, 5, and 6
# -> These tasks handles the two file datas, convery votes into %, and determination of who won.



import csv
import matplotlib.pyplot as plt
from datetime import datetime

# Define file paths
voting_file = "C:/Users/spluffy/Downloads/Voting-Counties.csv"
state_info_file = "C:/Users/spluffy/Downloads/State-Info.csv"

# Task 1: Read county vote data and sum votes for each candidate per state (Jason Feng)
with open(voting_file, 'r', encoding='utf-8-sig') as file:
    data = file.readlines()
del data[0] # removes header

# Gather all state abbreviations (ignoring blanks)
states = set()
for county in data:
    info = county.split(',')
    if len(info) > 3:
        state_id = info[3].strip()
        if state_id:
            states.add(state_id)  # Add unique state abbreviations

states = list(states)  # Convert set to list for processing

# Task 4: Read state info (electoral votes) from State-Info.csv (Jason Feng)
with open(state_info_file, 'r', encoding='utf-8-sig') as file:
    reader = csv.reader(file, quotechar='"', skipinitialspace=True)
    info_list = list(reader)

info_list = info_list[4:55]  # Remove headers and extra rows
State_and_EVote = {}  # Dictionary to hold state abbreviation and electoral votes
for state in info_list:
    if len(state) > 14:
        State_Abbr = state[1]  # State abbreviation
        try:
            electoral_votes = int(state[14].replace(',', ''))  # Convert vote string to int
            State_and_EVote[State_Abbr] = electoral_votes
        except ValueError:
            continue

# Storage for results
PopularVote_R = 0 
PopularVote_B = 0
Total_Votes_R = 0
Total_Votes_B = 0
State_Summary = {}

# Task 2, 3, 5: Calculate votes, percentages, determine winners per state and store state summaries. (Jason Feng)
for state in states:
    SVote_R = 0  # State-level Road Runner votes
    SVote_B = 0  # State-level Buggs Bunny votes
    for county in data:
        info = county.split(',')
        if len(info) > 14 and info[3] == state:
            try:
                SVote_R += int(info[13])
                SVote_B += int(info[14])
            except ValueError:
                continue

    total_votes = SVote_R + SVote_B
    percent_B = (SVote_B / total_votes) * 100 if total_votes > 0 else 0
    percent_R = (SVote_R / total_votes) * 100 if total_votes > 0 else 0
    winner = 'Buggs Bunny' if SVote_B > SVote_R else 'Road Runner'
    EVotes = State_and_EVote.get(state, 0) # Get electoral votes

    # Store results in the summary dictionary
    State_Summary[state] = {
        'BB': SVote_B,
        'RR': SVote_R,
        'percent_B': percent_B,
        'percent_R': percent_R,
        'winner': winner,
        'EVotes': EVotes
    }

    # Update national popular vote totals
    PopularVote_B += SVote_B
    PopularVote_R += SVote_R

    # Award electoral votes to the winning candidate in the state
    if winner == 'Buggs Bunny':
        Total_Votes_B += EVotes
    elif winner == 'Road Runner':
        Total_Votes_R += EVotes

# Task 6: Print final electoral college results (Jason Feng)
print("\nFinal Electoral Vote Count:")
print(f'Road Runner: {Total_Votes_R} Electoral Votes')
print(f'Buggs Bunny: {Total_Votes_B} Electoral Votes')
if Total_Votes_B > Total_Votes_R:
    print('Buggs Bunny wins the election!')
else:
    print('Road Runner wins the election!')


# Task 7 – Summary the votes from each state (William Sun)
def state_summary(state_id):
    # Check if the state_id exists in the summary dictionary
    if state_id in State_Summary:
        summary = State_Summary[state_id]
        # Print a formatted summary of votes for the selected state
        print(f"\nSummary for State: {state_id}")
        print(f"Buggs Bunny: {summary['BB']} votes ({summary['percent_B']:.2f}%)")
        print(f"Road Runner: {summary['RR']} votes ({summary['percent_R']:.2f}%)")
        print(f"Winner: {summary['winner']}")
        print(f"Electoral Votes Awarded: {summary['EVotes']}")
    else:
        # If the state ID is not valid
        print("Invalid state ID")


# Task 8: Print summary table of results (William Sun)
print("\n{:<12} {:>15} {:>15} {:>10} {:>10} {:>10}".format("State", "BB Votes", "RR Votes", "BB %", "RR %", "EVotes"))
print("-" * 70)
for state in sorted(State_Summary.keys()):
    summary = State_Summary[state]
    print("{:<12} {:>15} {:>15} {:>9.2f}% {:>9.2f}% {:>10}".format(
        state, summary['BB'], summary['RR'], summary['percent_B'], summary['percent_R'], summary['EVotes']
    ))


# Loop through each state alphabetically and print summary row
for state in sorted(State_Summary.keys()):
    summary = State_Summary[state]
    print("{:<12} {:>15} {:>15} {:>9.2f}% {:>9.2f}% {:>10}".format(
        state, summary['BB'], summary['RR'], summary['percent_B'], summary['percent_R'], summary['EVotes']
    ))

# Task 9: Generate summary based on user-specific date/time (William Sun)
def datetime_summary(user_time_str):
    try:
        # Parse the user input into a datetime object
        user_time = datetime.strptime(user_time_str, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        # Handle incorrect time format
        print("Invalid format. Use YYYY-MM-DD HH:MM:SS")
        return

    # Initialize vote counters
    Pop_B, Pop_R = 0, 0
    EV_B, EV_R = 0, 0
    states_reported = set()

    # calculate votes
    for state in states:
        SVote_R, SVote_B = 0, 0
        all_reported = True  # Assume all counties are reported unless found otherwise

        for county in data:
            info = county.strip().split(',')
            if info[3] == state:
                try:
                    # Try to parse the timestamp and compare it to the user-specified time
                    timestamp = datetime.strptime(info[15], "%Y-%m-%d %H:%M:%S")
                    if timestamp <= user_time:
                        # Accumulate votes if reported before or on the specified time
                        SVote_R += int(info[13])
                        SVote_B += int(info[14])
                    else:
                        #  mark the state as not fully reported
                        all_reported = False
                except (IndexError, ValueError):
                    # Handle missing or invalid timestamp or vote data
                    all_reported = False
                    continue

        # Add current state's votes 
        Pop_B += SVote_B
        Pop_R += SVote_R

        # Allocate electoral votes only 
        if all_reported:
            if SVote_B > SVote_R:
                EV_B += State_and_EVote.get(state, 0)
            elif SVote_R > SVote_B:
                EV_R += State_and_EVote.get(state, 0)
            states_reported.add(state)

    # Calculate percentage 
    percent_reported = (len(states_reported) / len(states)) * 100

    # Print the final report
    print(f"\nTime-based Summary as of {user_time_str}:")
    print(f"Popular Vote — BB: {Pop_B}, RR: {Pop_R}")
    print(f"Electoral Vote — BB: {EV_B}, RR: {EV_R}")
    print(f"Percentage of states fully reported: {percent_reported:.2f}%")



# Extra credit task 1: PLot county election results on a map (Yuxin Liu)
plt.figure(figsize=(10, 6))
for county in data:
    info = county.split(',')
    if len(info) > 7 and info[6] and info[7]:  # Ensure latitude and longitude exist
        try:
            lat = float(info[6])
            lon = float(info[7])
            BB_Votes = int(info[14]) if info[14] else 0
            RR_Votes = int(info[13]) if info[13] else 0
            color = 'green' if BB_Votes > RR_Votes else 'magenta' # Determine winner color
            plt.scatter(lon, lat, color=color, alpha=0.6)
        except ValueError:
            continue

plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.title("County Election Results: Buggs Bunny (Green) vs Road Runner (Magenta)")
plt.show()
